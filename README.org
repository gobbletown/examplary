* =examplary= - An example-oriented DSL that can be used to construct and compose NLP tasks
- Write code declaratively for functions that don't exist yet
- Describe literary devices
- seq2sesq
- example-oriented
- describing seq2seq tasks
- prototyping language that uses seq2seq to approximate tasks
- compile to
  - OpenAPI requests
  - Direct LM requests
    - Spacy

| File extension | Name                          |
|----------------+-------------------------------|
| =xlr=          | exampalry clojure source file |

** Introduction to the language
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  ;; :g specifies an [pipable] command which can generate examples or as a source of truth for query reformulation (when generating prompts)
  ;; :i specifies a source of input (training) strings from a jsonl file
  ;; :o specifies an output file for outputting jsonl
  
  (def lines->regex
    :e "grex"
    "example 1\nexample2" "^example [12]$"
    "example 2\nexample3" "^example [23]$"
    "pi4\npi5" "^pi[45]$")
  
  (def topic->analogy
    ;; Each line is a training example.
    "Neural networks" "Neural networks are like genetic algorithms in that both are systems that learn from experience"
    "Social media" "Social media is like a market in that both are systems that coordinate the actions of many individuals.")
  
  (def topic->field-of-study
    "chemistry" "study of chemicals"
    "biology" "study of living things")
  
  (def cron->natural-language
    :e "interpret-crontab"
    "17 *	* * *" "At minute 17."
    "25 6	* * *" "At 06:25."
    "47 6	* * 7" "At 06:47 on Sunday."
    "52 6	1 * *" "At 06:52 on day-of-month 1.")
#+END_SRC

** Prompts
This is the repository containing my personal
curation of GPT-3 prompts that are formatted
for =pen.el= and =examplary=.

https://github.com/mullikine/prompts/

** Interpreter
| File  | Name            |
|-------+-----------------|
| =xlr= | XLR interpreter |

** Tasks to implement
- https://spacy.io/universe/project/contextualSpellCheck

** Thoughts
- Lisp > TCL, since types may be added later

*** Example: grex -- LMs would eventually learn to do this
It should be possible to describe the function that does what you want before it is created

#+BEGIN_SRC text -n :async :results verbatim code
  pi4
  pi5
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  ^pi[45]$
#+END_SRC

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (def regex
    "example 1\nexample2" "^example [12]$"
    "example 2\nexample3" "^example [23]$"
    "pi4\npi5" "^pi[45]$")
#+END_SRC

Then, in the future, something learns to do regex, such as a language model, or someone makes a program to do it.

**** Literary devices. Example: generate analogies
Analogy is both the function name and the type of the resulting string.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (def analogy
    ;; Each line is a training example.
    "Neural networks" "Neural networks are like genetic algorithms in that both are systems that learn from experience"
    "Social media" "Social media is like a market in that both are systems that coordinate the actions of many individuals.")

  (def field
    "chemistry" "study of chemicals"
    "biology" "study of living things")
#+END_SRC

Then you can compose functions and you get
another =seq->seq= function, which you can use
to generate a list of analogies to do with
botany.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (analogy (field "plants"))
#+END_SRC

Or you can use it to find actual analogies for fields of study by not seeding the function at all.

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (analogy (field))
#+END_SRC

** Future
Extend this to code as well, since =seq2seq= can generate code.

** Compiler targets
*** OpenAI API requests
*** GPT-2 (Python, maybe)

** Python code
- https://github.com/shreyashankar/gpt3-sandbox/blob/master/examples/run_analogies_app.py
- https://github.com/shreyashankar/gpt3-sandbox/blob/master/examples/run_command_to_email_app.py
- https://github.com/shreyashankar/gpt3-sandbox/blob/master/examples/run_general_knowledge_q_and_a_app.py

#+BEGIN_SRC python -n :i python3.6 :async :results verbatim code
  # Construct GPT object and show some examples
  gpt = GPT(engine="davinci",
            temperature=0.5,
            max_tokens=100)
  
  gpt.add_example(Example('Neural networks are like',
                          'genetic algorithms in that both are systems that learn from experience.'))
  gpt.add_example(Example('Social media is like',
                          'a market in that both are systems that coordinate the actions of many individuals.'))
  gpt.add_example(Example(
      'A2E is like', 'lipofuscin in that both are byproducts of the normal operation of a system.'))
  gpt.add_example(Example('Haskell is like',
                          'LISP in that both are functional languages.'))
  gpt.add_example(Example('Quaternions are like',
                          'matrices in that both are used to represent rotations in three dimensions.'))
  gpt.add_example(Example('Quaternions are like',
                          'octonions in that both are examples of non-commutative algebra.'))
  
  # Define UI configuration
  config = UIConfig(description="Analogies generator",
                    button_text="Generate",
                    placeholder="Memes are like")
#+END_SRC

** Clojure library
Develop a clojure library in conjunction with this DSL.

** What is known to work in the DSL so far
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (cons 4 '(1 2 3))
  (str "Hello" " " "World")
  (+ 1 1) ; => 2
  (- 2 1) ; => 1
  (* 1 2) ; => 2
  (/ 2 1) ; => 2
  (eval '(+ 1 2))
#+END_SRC